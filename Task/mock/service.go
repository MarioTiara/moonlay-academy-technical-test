// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/marioTiara/todolistwebapi/Task (interfaces: Service)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	task "github.com/marioTiara/todolistwebapi/Task"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockService) Create(arg0 task.AddTaskRequest) (task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), arg0)
}

// CreateSubTask mocks base method.
func (m *MockService) CreateSubTask(arg0 uint, arg1 task.AddTaskRequest) (task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubTask", arg0, arg1)
	ret0, _ := ret[0].(task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubTask indicates an expected call of CreateSubTask.
func (mr *MockServiceMockRecorder) CreateSubTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubTask", reflect.TypeOf((*MockService)(nil).CreateSubTask), arg0, arg1)
}

// FilterTask mocks base method.
func (m *MockService) FilterTask(arg0, arg1 string, arg2, arg3 int) ([]task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterTask", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTask indicates an expected call of FilterTask.
func (mr *MockServiceMockRecorder) FilterTask(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTask", reflect.TypeOf((*MockService)(nil).FilterTask), arg0, arg1, arg2, arg3)
}

// FindAll mocks base method.
func (m *MockService) FindAll() ([]task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockServiceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockService)(nil).FindAll))
}

// FindByID mocks base method.
func (m *MockService) FindByID(arg0 uint) (*task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(*task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockServiceMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockService)(nil).FindByID), arg0)
}

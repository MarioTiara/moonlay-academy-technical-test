// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/marioTiara/todolistwebapi/Task (interfaces: Repository)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	task "github.com/marioTiara/todolistwebapi/Task"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(arg0 task.Task) (task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), arg0)
}

// CreateSubTask mocks base method.
func (m *MockRepository) CreateSubTask(arg0 task.Task) (task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubTask", arg0)
	ret0, _ := ret[0].(task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubTask indicates an expected call of CreateSubTask.
func (mr *MockRepositoryMockRecorder) CreateSubTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubTask", reflect.TypeOf((*MockRepository)(nil).CreateSubTask), arg0)
}

// FilterByTitleAndDescription mocks base method.
func (m *MockRepository) FilterByTitleAndDescription(arg0, arg1 string, arg2, arg3 int) ([]task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterByTitleAndDescription", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterByTitleAndDescription indicates an expected call of FilterByTitleAndDescription.
func (mr *MockRepositoryMockRecorder) FilterByTitleAndDescription(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterByTitleAndDescription", reflect.TypeOf((*MockRepository)(nil).FilterByTitleAndDescription), arg0, arg1, arg2, arg3)
}

// FindAll mocks base method.
func (m *MockRepository) FindAll() ([]task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRepository)(nil).FindAll))
}

// FindByID mocks base method.
func (m *MockRepository) FindByID(arg0 uint) (task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockRepositoryMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockRepository)(nil).FindByID), arg0)
}
